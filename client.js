
///////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////// MQTT CONNECTING //////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

//const mqtt = require('mqtt'); Anyone that works well with you
import { connect } from 'mqtt';
const client = connect('mqtt://mqttServer');

var options = { retian: true, qos: 2 };

///////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////// MQTT CONNECTING //////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

client.on('connect', function () {
    client.subscribe(topic, function (err) {
        if (!err) { // Connected without error
            console.log("Connected to MQTT Broker...");
        }
        else {
            console.log("Error connecting to MQTT Broker....")
            console.log(err)
        }
    })
})


///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////// HANDLE INCOMING MQTT MESSAGES ///////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

client.on('message', function (topic, message) {
    // Example of how I handle incoming messages. I first convert to string,
    // then parse it as a json message. 
    // So, you can handle incoming message from your end if need be.
    
    msg = message.toString();

    jsonInput = JSON.parse(msg);

    //client.end() // command to end connection (not needed)
})


///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////// PUBLISH MQTT MESSAGES ///////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

// Now, when the front end access that API, you should publish the command using this. 
client.publish(topic, stream_response, options, function () {
    console.log('Published successfully');
});

////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////
